{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAYC,SAASC,cAAc,uBACnCC,EAAWF,SAASC,cAAc,sBAClCE,EAAaH,SAASC,cAAc,wBACpCG,EAAaJ,SAASC,cAAc,gBAI1C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,GACFF,EAAQ,C,SAAEH,E,MAAUC,IAEtBG,EAAO,C,SAAEJ,E,MAAUC,MAClBA,MAVPH,EAAWW,iBAAiB,SAc5B,SAA2BC,GAGzB,GAFAA,EAAMC,iBAGgB,KAApBlB,EAAUmB,OACS,KAAnBhB,EAASgB,OACY,KAArBf,EAAWe,MAEX,OAAOC,EAAAtB,GAASuB,OAAOC,QAAQ,8BAGjCjB,EAAWkB,UAAW,EAEtB,IAAIC,EAAQC,OAAOzB,EAAUmB,OACzBO,EAAOD,OAAOtB,EAASgB,OACvBQ,EAASF,OAAOrB,EAAWe,OAE/B,IAAK,IAAIS,EAAI,EAAGA,EAAID,EAAQC,GAAK,EAAG,CAIlCtB,EAHesB,EAAI,EACJJ,EAAQE,EAAOE,GAG3BC,MAAK,EAACtB,SAAEA,EAAQC,MAAEA,MACjBY,EAAAtB,GAASuB,OAAOS,QACd,uBAAqBvB,QAAiBC,UAGzCuB,OAAM,EAACxB,SAAEA,EAAQC,MAAEA,MAClBY,EAAAtB,GAASuB,OAAOW,QACd,sBAAoBzB,QAAeC","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formDelay = document.querySelector('input[name = delay]');\nconst formStep = document.querySelector('input[name = step]');\nconst formAmount = document.querySelector('input[name = amount]');\nconst formButton = document.querySelector('.form button');\n\nformButton.addEventListener('click', onformButtonClick);\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n      reject({ position, delay });\n    }, delay);\n  });\n}\n\nfunction onformButtonClick(event) {\n  event.preventDefault();\n\n  if (\n    formDelay.value === '' ||\n    formStep.value === '' ||\n    formAmount.value === ''\n  ) {\n    return Notiflix.Notify.warning('All fields must be filled!');\n  }\n\n  formButton.disabled = true;\n\n  let delay = Number(formDelay.value);\n  let step = Number(formStep.value);\n  let amount = Number(formAmount.value);\n\n  for (let i = 0; i < amount; i += 1) {\n    let position = i + 1;\n    let newDelay = delay + step * i;\n\n    createPromise(position, newDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$formDelay","document","querySelector","$47d4ff9957288465$var$formStep","$47d4ff9957288465$var$formAmount","$47d4ff9957288465$var$formButton","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","value","$parcel$interopDefault","Notify","warning","disabled","delay1","Number","step","amount","i","then","success","catch","failure"],"version":3,"file":"03-promises.3e607d9f.js.map"}